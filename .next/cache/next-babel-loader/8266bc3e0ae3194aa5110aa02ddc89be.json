{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/home/raul-alzate/Documentos/project/pathway-learning/web/src/pages/pathway/pathway.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Row, Col, Form, Label, Input, Button, FloatLabel } from \"@panely/components\";\nimport { useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport Router from \"next/router\";\nimport Avatar from \"react-avatar-edit\";\nimport Swal from \"@panely/sweetalert2\";\nimport swalContent from \"sweetalert2-react-content\";\nvar ReactSwal = swalContent(Swal);\n_c = ReactSwal;\nvar toast = ReactSwal.mixin({\n  toast: true,\n  position: \"top-end\",\n  showConfirmButton: false,\n  timer: 3000,\n  timerProgressBar: true,\n  onOpen: function onOpen(toast) {\n    toast.addEventListener(\"mouseenter\", ReactSwal.stopTimer);\n    toast.addEventListener(\"mouseleave\", ReactSwal.resumeTimer);\n  }\n});\n\nfunction PathwayForm(_ref) {\n  _s();\n\n  var _data$image;\n\n  var onSave = _ref.onSave,\n      data = _ref.data;\n\n  var _useState = useState({\n    preview: (data === null || data === void 0 ? void 0 : (_data$image = data.image) === null || _data$image === void 0 ? void 0 : _data$image.preview) || \"\",\n    src: \"\"\n  }),\n      image = _useState[0],\n      setImage = _useState[1]; // Define Yup schema for form validation\n\n\n  var schema = yup.object().shape({\n    name: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your name\"),\n    description: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your description\")\n  });\n\n  var _useForm = useForm({\n    // Apply Yup as resolver for react-hook-form\n    resolver: yupResolver(schema),\n    // Define the default values for all input forms\n    defaultValues: {\n      name: (data === null || data === void 0 ? void 0 : data.name) || \"\",\n      description: (data === null || data === void 0 ? void 0 : data.description) || \"\",\n      tags: (data === null || data === void 0 ? void 0 : data.tags) || \"\"\n    }\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors;\n\n  var onClose = function onClose() {\n    setImage({\n      preview: null\n    });\n  };\n\n  var onCrop = function onCrop(preview) {\n    setImage({\n      preview: preview\n    });\n  };\n\n  var onBeforeFileLoad = function onBeforeFileLoad(elem) {\n    if (elem.target.files[0].size > 71680) {\n      toast.fire({\n        icon: \"error\",\n        title: \"The image is very large\"\n      });\n      elem.target.value = \"\";\n    }\n  };\n\n  return __jsx(Form, {\n    onSubmit: handleSubmit(function (data) {\n      onSave(_objectSpread(_objectSpread({}, data), {}, {\n        image: image\n      }));\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    xs: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, __jsx(Avatar, {\n    width: 130,\n    height: 130,\n    onCrop: onCrop,\n    onClose: onClose,\n    onBeforeFileLoad: onBeforeFileLoad,\n    src: image.src,\n    label: \"Pathway icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }))), __jsx(Col, {\n    xs: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, image.preview && __jsx(\"img\", {\n    src: image.preview,\n    alt: \"Preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 31\n    }\n  }))), __jsx(Col, {\n    xs: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, __jsx(FloatLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, __jsx(Controller, {\n    as: Input,\n    type: \"text\",\n    id: \"name\",\n    name: \"name\",\n    control: control,\n    invalid: Boolean(errors.name),\n    placeholder: \"Insert your name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }), __jsx(Label, {\n    \"for\": \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }, \"Name\"), errors.name && __jsx(Form.Feedback, {\n    children: errors.name.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 31\n    }\n  }))), __jsx(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, __jsx(FloatLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, __jsx(Controller, {\n    as: Input,\n    type: \"textarea\",\n    id: \"description\",\n    name: \"description\",\n    control: control,\n    invalid: Boolean(errors.description),\n    placeholder: \"Insert your description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }), __jsx(Label, {\n    \"for\": \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }, \"Description\"), errors.description && __jsx(Form.Feedback, {\n    children: errors.description.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }))), __jsx(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, __jsx(FloatLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, __jsx(Controller, {\n    as: Input,\n    type: \"text\",\n    id: \"tags\",\n    name: \"tags\",\n    control: control,\n    placeholder: \"Insert your tags separated by commas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }), __jsx(Label, {\n    \"for\": \"tags\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, \"Tags\"))))), __jsx(Button, {\n    type: \"submit\",\n    variant: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, data === null || data === undefined ? \"Create\" : \"Update\"), __jsx(Button, {\n    type: \"button\",\n    className: \"ml-2\",\n    onClick: function onClick() {\n      Router.back();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, \"Cancel\"));\n}\n\n_s(PathwayForm, \"JtXo8q1IA4CnFYetT2sZU4m1yV8=\", false, function () {\n  return [useForm];\n});\n\n_c2 = PathwayForm;\nexport default PathwayForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReactSwal\");\n$RefreshReg$(_c2, \"PathwayForm\");","map":{"version":3,"sources":["/home/raul-alzate/Documentos/project/pathway-learning/web/src/pages/pathway/pathway.jsx"],"names":["Row","Col","Form","Label","Input","Button","FloatLabel","useState","useForm","Controller","yup","yupResolver","Router","Avatar","Swal","swalContent","ReactSwal","toast","mixin","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","PathwayForm","onSave","data","preview","image","src","setImage","schema","object","shape","name","string","min","required","description","resolver","defaultValues","tags","control","handleSubmit","errors","onClose","onCrop","onBeforeFileLoad","elem","target","files","size","fire","icon","title","value","Boolean","message","undefined","back"],"mappings":"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","sourcesContent":["import {\n  Row,\n  Col,\n  Form,\n  Label,\n  Input,\n  Button,\n  FloatLabel,\n} from \"@panely/components\";\nimport { useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport Router from \"next/router\";\nimport Avatar from \"react-avatar-edit\";\nimport Swal from \"@panely/sweetalert2\";\nimport swalContent from \"sweetalert2-react-content\";\nconst ReactSwal = swalContent(Swal);\nconst toast = ReactSwal.mixin({\n  toast: true,\n  position: \"top-end\",\n  showConfirmButton: false,\n  timer: 3000,\n  timerProgressBar: true,\n  onOpen: (toast) => {\n    toast.addEventListener(\"mouseenter\", ReactSwal.stopTimer);\n    toast.addEventListener(\"mouseleave\", ReactSwal.resumeTimer);\n  },\n});\n\nfunction PathwayForm({ onSave, data }) {\n  const [image, setImage] = useState({\n    preview: data?.image?.preview || \"\",\n    src: \"\",\n  });\n  // Define Yup schema for form validation\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .min(5, \"Please enter at least 5 characters\")\n      .required(\"Please enter your name\"),\n    description: yup\n      .string()\n      .min(5, \"Please enter at least 5 characters\")\n      .required(\"Please enter your description\"),\n  });\n\n  const { control, handleSubmit, errors } = useForm({\n    // Apply Yup as resolver for react-hook-form\n    resolver: yupResolver(schema),\n    // Define the default values for all input forms\n    defaultValues: {\n      name: data?.name || \"\",\n      description: data?.description || \"\",\n      tags: data?.tags || \"\",\n    },\n  });\n\n  const onClose = () => {\n    setImage({ preview: null });\n  };\n\n  const onCrop = (preview) => {\n    setImage({ preview });\n  };\n\n  const onBeforeFileLoad = (elem) => {\n    if (elem.target.files[0].size > 71680) {\n      toast.fire({\n        icon: \"error\",\n        title: \"The image is very large\",\n      });\n      elem.target.value = \"\";\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit((data) => {\n      onSave({...data, image: image})\n    })}>\n      <Row>\n        <Col xs=\"6\">\n          <Form.Group>\n            <Avatar\n              width={130}\n              height={130}\n              onCrop={onCrop}\n              onClose={onClose}\n              onBeforeFileLoad={onBeforeFileLoad}\n              src={image.src}\n              label={\"Pathway icon\"}\n            />\n          </Form.Group>\n        </Col>\n        <Col xs=\"6\">\n          <Form.Group>\n            {image.preview && <img src={image.preview} alt=\"Preview\" />}\n          </Form.Group>\n        </Col>\n        <Col xs=\"12\">\n          {/* BEGIN Form Group */}\n          <Form.Group>\n            <FloatLabel>\n              <Controller\n                as={Input}\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                control={control}\n                invalid={Boolean(errors.name)}\n                placeholder=\"Insert your name\"\n              />\n              <Label for=\"name\">Name</Label>\n              {errors.name && <Form.Feedback children={errors.name.message} />}\n            </FloatLabel>\n          </Form.Group>\n          {/* END Form Group */}\n\n          {/* BEGIN Form Group */}\n          <Form.Group>\n            <FloatLabel>\n              <Controller\n                as={Input}\n                type=\"textarea\"\n                id=\"description\"\n                name=\"description\"\n                control={control}\n                invalid={Boolean(errors.description)}\n                placeholder=\"Insert your description\"\n              />\n              <Label for=\"description\">Description</Label>\n              {errors.description && (\n                <Form.Feedback children={errors.description.message} />\n              )}\n            </FloatLabel>\n          </Form.Group>\n          {/* END Form Group */}\n\n          {/* BEGIN Form Group */}\n          <Form.Group>\n            <FloatLabel>\n              <Controller\n                as={Input}\n                type=\"text\"\n                id=\"tags\"\n                name=\"tags\"\n                control={control}\n                placeholder=\"Insert your tags separated by commas\"\n              />\n              <Label for=\"tags\">Tags</Label>\n            </FloatLabel>\n          </Form.Group>\n          {/* END Form Group */}\n        </Col>\n      </Row>\n      <Button type=\"submit\" variant=\"primary\">\n        {data === null || data === undefined ? \"Create\" : \"Update\"}\n      </Button>\n      <Button\n        type=\"button\"\n        className=\"ml-2\"\n        onClick={() => {\n          Router.back();\n        }}\n      >\n        Cancel\n      </Button>\n    </Form>\n  );\n}\n\nexport default PathwayForm;\n"]},"metadata":{},"sourceType":"module"}