{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Container, Row, Col, Portlet } from \"@panely/components\";\nimport { firestoreClient } from \"components/firebase/firebaseClient\";\nimport { pageChangeHeaderTitle, breadcrumbChange, activityChange } from \"store/actions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport withLayout from \"components/layout/withLayout\";\nimport withAuth from \"components/firebase/firebaseWithAuth\";\nimport Head from \"next/head\";\nimport uuid from \"components/helpers/uuid\";\nimport Router from \"next/router\";\nimport Swal from \"@panely/sweetalert2\";\nimport swalContent from \"sweetalert2-react-content\";\nimport TrackList from \"./trackList\";\nimport TrackForm from \"./track\";\nconst ReactSwal = swalContent(Swal);\nconst toast = ReactSwal.mixin({\n  toast: true,\n  position: \"top-end\",\n  showConfirmButton: false,\n  timer: 3000,\n  timerProgressBar: true,\n  onOpen: toast => {\n    toast.addEventListener(\"mouseenter\", ReactSwal.stopTimer);\n    toast.addEventListener(\"mouseleave\", ReactSwal.resumeTimer);\n  }\n});\n\nclass FormBasePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (!Router.query.runnerId) {\n      Router.push(\"/pathway/create\");\n    } else {\n      this.state = {\n        pathwayId: Router.query.pathwayId,\n        runnerId: Router.query.runnerId,\n        saved: false\n      };\n      this.onCreate = this.onCreate.bind(this);\n    }\n  }\n\n  componentDidMount() {\n    // Set header title\n    this.props.pageChangeHeaderTitle(\"Update Pathway\"); // Set breadcrumb data\n\n    this.props.breadcrumbChange([{\n      text: \"Pathway\",\n      link: \"/\"\n    }, {\n      text: \"Runner\",\n      link: \"/runner/create?pathwayId=\" + Router.query.pathwayId\n    }, {\n      text: \"Track\"\n    }]);\n  }\n\n  onCreate(data) {\n    const trackId = uuid();\n    const runnersDb = firestoreClient.collection(\"runners\").doc(this.state.runnerId);\n    return runnersDb.collection(\"tracks\").doc(trackId).set(_objectSpread({\n      level: 1\n    }, data)).then(docRef => {\n      this.setState(_objectSpread({\n        pathwayId: this.state.pathwayId,\n        runnerId: this.state.runnerId,\n        trackId: trackId\n      }, data));\n      toast.fire({\n        icon: \"success\",\n        title: \"Track saved successfully\"\n      });\n      this.props.activityChange(_objectSpread({\n        pathwayId: this.state.pathwayId,\n        type: \"new_track\",\n        msn: 'The \"' + data.name + '\" track was created.'\n      }, data));\n    }).catch(error => {\n      console.error(\"Error adding document: \", error);\n      toast.fire({\n        icon: \"error\",\n        title: \"Creation track\"\n      });\n    });\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Track | Create\")), __jsx(Container, {\n      fluid: true\n    }, __jsx(Row, null, __jsx(Col, {\n      md: \"6\"\n    }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Track | Create\")), __jsx(Portlet.Body, null, __jsx(\"p\", null, \"Create each track to evaluate the competencies within the runner.\"), __jsx(\"hr\", null), __jsx(TrackForm, {\n      onSave: this.onCreate\n    })))), __jsx(Col, {\n      md: \"6\"\n    }, __jsx(Portlet, null, __jsx(Portlet.Header, {\n      bordered: true\n    }, __jsx(Portlet.Title, null, \"Tracks\")), __jsx(Portlet.Body, null, __jsx(TrackList, {\n      runnerId: this.state.runnerId,\n      pathwayId: this.state.pathwayId,\n      data: this.state\n    })))))));\n  }\n\n}\n\nfunction mapDispathToProps(dispatch) {\n  return bindActionCreators({\n    pageChangeHeaderTitle,\n    breadcrumbChange,\n    activityChange\n  }, dispatch);\n}\n\nexport default connect(null, mapDispathToProps)(withAuth(withLayout(FormBasePage)));","map":null,"metadata":{},"sourceType":"module"}