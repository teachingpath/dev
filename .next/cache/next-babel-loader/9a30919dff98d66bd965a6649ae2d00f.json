{"ast":null,"code":"var _jsxFileName = \"/home/raul-alzate/Documentos/project/pathway-learning/web/src/pages/pathway/trophy.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Row, Col, Form, Label, Input, Button, FloatLabel, CustomInput } from \"@panely/components\";\nimport { firestoreClient } from \"components/firebase/firebaseClient\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport Swal from \"@panely/sweetalert2\";\nimport swalContent from \"sweetalert2-react-content\";\nimport Avatar from \"react-avatar-edit\";\nimport { useState } from \"react\";\nconst ReactSwal = swalContent(Swal);\nconst toast = ReactSwal.mixin({\n  toast: true,\n  position: \"top-end\",\n  showConfirmButton: false,\n  timer: 3000,\n  timerProgressBar: true,\n  onOpen: toast => {\n    toast.addEventListener(\"mouseenter\", ReactSwal.stopTimer);\n    toast.addEventListener(\"mouseleave\", ReactSwal.resumeTimer);\n  }\n});\n\nfunction TrophyForm({\n  pathwayId,\n  saved,\n  data,\n  activityChange\n}) {\n  var _data$image;\n\n  const {\n    0: image,\n    1: setImage\n  } = useState({\n    preview: (data === null || data === void 0 ? void 0 : (_data$image = data.image) === null || _data$image === void 0 ? void 0 : _data$image.preview) || \"\",\n    src: \"\"\n  }); // Define Yup schema for form validation\n\n  const schema = yup.object().shape({\n    name: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your name\"),\n    description: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your description\"),\n    points: yup.number().min(100, \"Please enter at least 10 points\").required(\"Please enter your points\")\n  });\n  const {\n    control,\n    handleSubmit,\n    errors\n  } = useForm({\n    // Apply Yup as resolver for react-hook-form\n    resolver: yupResolver(schema),\n    // Define the default values for all input forms\n    defaultValues: {\n      name: (data === null || data === void 0 ? void 0 : data.name) || \"\",\n      description: (data === null || data === void 0 ? void 0 : data.description) || \"\",\n      points: (data === null || data === void 0 ? void 0 : data.points) || 100\n    }\n  }); // Handle form submit event\n\n  const onSubmit = data => {\n    firestoreClient.collection(\"pathways\").doc(pathwayId).update({\n      trophy: _objectSpread({}, data)\n    }).then(docRef => {\n      toast.fire({\n        icon: \"success\",\n        title: \"Trophy saved successfully\"\n      });\n      activityChange({\n        pathwayId: pathwayId,\n        type: \"edit_pathway\",\n        msn: 'The \"' + data.name + '\" trophy was changed.'\n      });\n    }).catch(error => {\n      toast.fire({\n        icon: \"error\",\n        title: \"Updating trophy\"\n      });\n    });\n  };\n\n  const onClose = () => {\n    setImage({\n      preview: null\n    });\n  };\n\n  const onCrop = preview => {\n    setImage({\n      preview\n    });\n  };\n\n  const onBeforeFileLoad = elem => {\n    if (elem.target.files[0].size > 71680) {\n      toast.fire({\n        icon: \"error\",\n        title: \"The image is very large\"\n      });\n      elem.target.value = \"\";\n    }\n  };\n\n  return __jsx(Form, {\n    onSubmit: handleSubmit(data => {\n      onSubmit(_objectSpread(_objectSpread({}, data), {}, {\n        image: image\n      }));\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    xs: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, __jsx(Avatar, {\n    width: 130,\n    height: 130,\n    onCrop: onCrop,\n    onClose: onClose,\n    onBeforeFileLoad: onBeforeFileLoad,\n    src: image.src,\n    label: \"Trophy icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }))), __jsx(Col, {\n    xs: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, image.preview && __jsx(\"img\", {\n    src: image.preview,\n    alt: \"Preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 31\n    }\n  }))), __jsx(Col, {\n    xs: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, __jsx(FloatLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, __jsx(Controller, {\n    as: Input,\n    type: \"text\",\n    id: \"trophy-name\",\n    name: \"name\",\n    control: control,\n    invalid: Boolean(errors.name),\n    placeholder: \"Insert your name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }), __jsx(Label, {\n    for: \"trophy-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, \"Name\"), errors.name && __jsx(Form.Feedback, {\n    children: errors.name.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 31\n    }\n  }))), __jsx(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, __jsx(FloatLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, __jsx(Controller, {\n    as: Input,\n    type: \"textarea\",\n    id: \"trophy-description\",\n    name: \"description\",\n    control: control,\n    invalid: Boolean(errors.description),\n    placeholder: \"Insert your description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  }), __jsx(Label, {\n    for: \"trophy-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 15\n    }\n  }, \"Description\"), errors.description && __jsx(Form.Feedback, {\n    children: errors.description.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }))), __jsx(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }, __jsx(FloatLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }, __jsx(Controller, {\n    as: Input,\n    type: \"number\",\n    id: \"trophy-points\",\n    name: \"points\",\n    control: control,\n    invalid: Boolean(errors.points),\n    placeholder: \"Insert your points\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 15\n    }\n  }), __jsx(Label, {\n    for: \"trophy-points\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 15\n    }\n  }, \"Points\"), errors.points && __jsx(Form.Feedback, {\n    children: errors.points.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }))))), __jsx(Button, {\n    type: \"submit\",\n    variant: \"primary\",\n    disabled: !saved,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }, data === null || data === undefined ? \"Add\" : \"Update\"));\n}\n\nexport default TrophyForm;","map":{"version":3,"sources":["/home/raul-alzate/Documentos/project/pathway-learning/web/src/pages/pathway/trophy.jsx"],"names":["Row","Col","Form","Label","Input","Button","FloatLabel","CustomInput","firestoreClient","useForm","Controller","yup","yupResolver","Swal","swalContent","Avatar","useState","ReactSwal","toast","mixin","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","TrophyForm","pathwayId","saved","data","activityChange","image","setImage","preview","src","schema","object","shape","name","string","min","required","description","points","number","control","handleSubmit","errors","resolver","defaultValues","onSubmit","collection","doc","update","trophy","then","docRef","fire","icon","title","type","msn","catch","error","onClose","onCrop","onBeforeFileLoad","elem","target","files","size","value","Boolean","message","undefined"],"mappings":"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","sourcesContent":["import {\n  Row,\n  Col,\n  Form,\n  Label,\n  Input,\n  Button,\n  FloatLabel,\n  CustomInput,\n} from \"@panely/components\";\nimport { firestoreClient } from \"components/firebase/firebaseClient\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport Swal from \"@panely/sweetalert2\";\nimport swalContent from \"sweetalert2-react-content\";\nimport Avatar from \"react-avatar-edit\";\nimport { useState } from \"react\";\n\nconst ReactSwal = swalContent(Swal);\nconst toast = ReactSwal.mixin({\n  toast: true,\n  position: \"top-end\",\n  showConfirmButton: false,\n  timer: 3000,\n  timerProgressBar: true,\n  onOpen: (toast) => {\n    toast.addEventListener(\"mouseenter\", ReactSwal.stopTimer);\n    toast.addEventListener(\"mouseleave\", ReactSwal.resumeTimer);\n  },\n});\n\nfunction TrophyForm({ pathwayId, saved, data, activityChange }) {\n  const [image, setImage] = useState({\n    preview: data?.image?.preview || \"\",\n    src: \"\",\n  });\n  // Define Yup schema for form validation\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .min(5, \"Please enter at least 5 characters\")\n      .required(\"Please enter your name\"),\n    description: yup\n      .string()\n      .min(5, \"Please enter at least 5 characters\")\n      .required(\"Please enter your description\"),\n    points: yup\n      .number()\n      .min(100, \"Please enter at least 10 points\")\n      .required(\"Please enter your points\"),\n  });\n\n  const { control, handleSubmit, errors } = useForm({\n    // Apply Yup as resolver for react-hook-form\n    resolver: yupResolver(schema),\n    // Define the default values for all input forms\n    defaultValues: {\n      name: data?.name || \"\",\n      description: data?.description || \"\",\n      points: data?.points || 100,\n    },\n  });\n\n  // Handle form submit event\n  const onSubmit = (data) => {\n    firestoreClient\n      .collection(\"pathways\")\n      .doc(pathwayId)\n      .update({\n        trophy: {\n          ...data,\n        },\n      })\n      .then((docRef) => {\n        toast.fire({\n          icon: \"success\",\n          title: \"Trophy saved successfully\",\n        });\n        activityChange({\n          pathwayId: pathwayId,\n          type: \"edit_pathway\",\n          msn: 'The \"' + data.name + '\" trophy was changed.',\n        });\n      })\n      .catch((error) => {\n        toast.fire({\n          icon: \"error\",\n          title: \"Updating trophy\",\n        });\n      });\n  };\n\n  const onClose = () => {\n    setImage({ preview: null });\n  };\n\n  const onCrop = (preview) => {\n    setImage({ preview });\n  };\n\n  const onBeforeFileLoad = (elem) => {\n    if (elem.target.files[0].size > 71680) {\n      toast.fire({\n        icon: \"error\",\n        title: \"The image is very large\",\n      });\n      elem.target.value = \"\";\n    }\n  };\n\n  return (\n    <Form\n      onSubmit={handleSubmit((data) => {\n        onSubmit({ ...data, image: image });\n      })}\n    >\n      <Row>\n        <Col xs=\"6\">\n          <Form.Group>\n            <Avatar\n              width={130}\n              height={130}\n              onCrop={onCrop}\n              onClose={onClose}\n              onBeforeFileLoad={onBeforeFileLoad}\n              src={image.src}\n              label={\"Trophy icon\"}\n            />\n          </Form.Group>\n        </Col>\n        <Col xs=\"6\">\n          <Form.Group>\n            {image.preview && <img src={image.preview} alt=\"Preview\" />}\n          </Form.Group>\n        </Col>\n        <Col xs=\"12\">\n          {/* BEGIN Form Group */}\n\n          <Form.Group>\n            <FloatLabel>\n              <Controller\n                as={Input}\n                type=\"text\"\n                id=\"trophy-name\"\n                name=\"name\"\n                control={control}\n                invalid={Boolean(errors.name)}\n                placeholder=\"Insert your name\"\n              />\n              <Label for=\"trophy-name\">Name</Label>\n              {errors.name && <Form.Feedback children={errors.name.message} />}\n            </FloatLabel>\n          </Form.Group>\n          {/* END Form Group */}\n\n          {/* BEGIN Form Group */}\n          <Form.Group>\n            <FloatLabel>\n              <Controller\n                as={Input}\n                type=\"textarea\"\n                id=\"trophy-description\"\n                name=\"description\"\n                control={control}\n                invalid={Boolean(errors.description)}\n                placeholder=\"Insert your description\"\n              />\n              <Label for=\"trophy-description\">Description</Label>\n              {errors.description && (\n                <Form.Feedback children={errors.description.message} />\n              )}\n            </FloatLabel>\n          </Form.Group>\n          {/* END Form Group */}\n\n          {/* BEGIN Form Group */}\n          <Form.Group>\n            <FloatLabel>\n              <Controller\n                as={Input}\n                type=\"number\"\n                id=\"trophy-points\"\n                name=\"points\"\n                control={control}\n                invalid={Boolean(errors.points)}\n                placeholder=\"Insert your points\"\n              />\n              <Label for=\"trophy-points\">Points</Label>\n              {errors.points && (\n                <Form.Feedback children={errors.points.message} />\n              )}\n            </FloatLabel>\n          </Form.Group>\n          {/* END Form Group */}\n        </Col>\n      </Row>\n      <Button type=\"submit\" variant=\"primary\" disabled={!saved}>\n        {data === null || data === undefined ? \"Add\" : \"Update\"}\n      </Button>\n    </Form>\n  );\n}\n\nexport default TrophyForm;\n"]},"metadata":{},"sourceType":"module"}