{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Row, Col, Form, Label, Input, Button, FloatLabel, CustomInput } from \"@panely/components\";\nimport { firestoreClient } from \"components/firebase/firebaseClient\";\nimport { useForm, Controller, useFieldArray } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport Swal from \"@panely/sweetalert2\";\nimport swalContent from \"sweetalert2-react-content\";\nimport Avatar from \"react-avatar-edit\";\nimport { useState } from \"react\";\nvar ReactSwal = swalContent(Swal);\nvar toast = ReactSwal.mixin({\n  toast: true,\n  position: \"top-end\",\n  showConfirmButton: false,\n  timer: 3000,\n  timerProgressBar: true,\n  onOpen: function onOpen(toast) {\n    toast.addEventListener(\"mouseenter\", ReactSwal.stopTimer);\n    toast.addEventListener(\"mouseleave\", ReactSwal.resumeTimer);\n  }\n});\n\nfunction BadgetForm(_ref) {\n  var _badget$image;\n\n  var runnerId = _ref.runnerId,\n      saved = _ref.saved,\n      data = _ref.data,\n      activityChange = _ref.activityChange,\n      pathwayId = _ref.pathwayId;\n  var badget = data.badget;\n\n  var _useState = useState({\n    preview: (badget === null || badget === void 0 ? void 0 : (_badget$image = badget.image) === null || _badget$image === void 0 ? void 0 : _badget$image.preview) || \"\",\n    src: \"\"\n  }),\n      image = _useState[0],\n      setImage = _useState[1]; // Define Yup schema for form validation\n\n\n  var schema = yup.object().shape({\n    name: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your name\"),\n    description: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your description\"),\n    points: yup.number().min(10, \"Please enter at least 10 points\").required(\"Please enter your points\")\n  });\n\n  var _useForm = useForm({\n    // Apply Yup as resolver for react-hook-form\n    resolver: yupResolver(schema),\n    // Define the default values for all input forms\n    defaultValues: {\n      name: (badget === null || badget === void 0 ? void 0 : badget.name) || \"\",\n      description: (badget === null || badget === void 0 ? void 0 : badget.description) || \"\",\n      points: (badget === null || badget === void 0 ? void 0 : badget.points) || 10\n    }\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors; // Handle form submit event\n\n\n  var onSubmit = function onSubmit(data) {\n    firestoreClient.collection(\"runners\").doc(runnerId).update({\n      badget: _objectSpread({}, data)\n    }).then(function (docRef) {\n      toast.fire({\n        icon: \"success\",\n        title: \"Badget saved successfully\"\n      });\n      activityChange({\n        pathwayId: pathwayId,\n        type: \"edit_runner\",\n        msn: 'The \"' + data.name + '\" badget was changed.'\n      });\n    })[\"catch\"](function (error) {\n      toast.fire({\n        icon: \"error\",\n        title: \"Creation badget\"\n      });\n    });\n  };\n\n  var onClose = function onClose() {\n    setImage({\n      preview: null\n    });\n  };\n\n  var onCrop = function onCrop(preview) {\n    setImage({\n      preview: preview\n    });\n  };\n\n  var onBeforeFileLoad = function onBeforeFileLoad(elem) {\n    if (elem.target.files[0].size > 71680) {\n      toast.fire({\n        icon: \"error\",\n        title: \"The image is very large\"\n      });\n      elem.target.value = \"\";\n    }\n  };\n\n  return __jsx(Form, {\n    onSubmit: handleSubmit(function (data) {\n      onSubmit(_objectSpread(_objectSpread({}, data), {}, {\n        image: image\n      }));\n    })\n  }, __jsx(Row, null, __jsx(Col, {\n    xs: \"6\"\n  }, __jsx(Form.Group, null, __jsx(Avatar, {\n    width: 130,\n    height: 130,\n    onCrop: onCrop,\n    onClose: onClose,\n    onBeforeFileLoad: onBeforeFileLoad,\n    src: image.src,\n    label: \"Badget icon\"\n  }))), __jsx(Col, {\n    xs: \"6\"\n  }, __jsx(Form.Group, null, image.preview && __jsx(\"img\", {\n    src: image.preview,\n    alt: \"Preview\"\n  }))), __jsx(Col, {\n    xs: \"12\"\n  }, __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"text\",\n    id: \"badget-name\",\n    name: \"name\",\n    control: control,\n    invalid: Boolean(errors.name),\n    placeholder: \"Insert your name\"\n  }), __jsx(Label, {\n    \"for\": \"badget-name\"\n  }, \"Name\"), errors.name && __jsx(Form.Feedback, {\n    children: errors.name.message\n  }))), __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"textarea\",\n    id: \"badget-description\",\n    name: \"description\",\n    control: control,\n    invalid: Boolean(errors.description),\n    placeholder: \"Insert your description\"\n  }), __jsx(Label, {\n    \"for\": \"badget-description\"\n  }, \"Description\"), errors.description && __jsx(Form.Feedback, {\n    children: errors.description.message\n  }))), __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"number\",\n    id: \"badget-points\",\n    name: \"points\",\n    control: control,\n    invalid: Boolean(errors.points),\n    placeholder: \"Insert your points\"\n  }), __jsx(Label, {\n    \"for\": \"badget-points\"\n  }, \"Points\"), errors.points && __jsx(Form.Feedback, {\n    children: errors.points.message\n  }))))), __jsx(Button, {\n    type: \"submit\",\n    variant: \"primary\",\n    disabled: !saved\n  }, \"Save\"));\n}\n\nexport default BadgetForm;","map":null,"metadata":{},"sourceType":"module"}