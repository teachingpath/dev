{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Form, Label, Input, Button, FloatLabel } from \"@panely/components\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport Router from \"next/router\";\n\nfunction RunnerForm(_ref) {\n  var onSave = _ref.onSave,\n      data = _ref.data;\n  var schema = yup.object().shape({\n    name: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your name\"),\n    description: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your description\"),\n    feedback: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your feedback\")\n  });\n\n  var _useForm = useForm({\n    // Apply Yup as resolver for react-hook-form\n    resolver: yupResolver(schema),\n    // Define the default values for all input forms\n    defaultValues: {\n      name: (data === null || data === void 0 ? void 0 : data.name) || \"\",\n      description: (data === null || data === void 0 ? void 0 : data.description) || \"\",\n      feedback: (data === null || data === void 0 ? void 0 : data.feedback) || \"\"\n    }\n  }),\n      control = _useForm.control,\n      errors = _useForm.errors,\n      handleSubmit = _useForm.handleSubmit,\n      reset = _useForm.reset;\n\n  return __jsx(Form, {\n    onSubmit: handleSubmit(function (data) {\n      onSave(data).then(function () {\n        reset();\n      });\n    })\n  }, __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"text\",\n    id: \"name\",\n    name: \"name\",\n    control: control,\n    invalid: Boolean(errors.name),\n    placeholder: \"Insert your name\"\n  }), __jsx(Label, {\n    \"for\": \"name\"\n  }, \"Name\"), errors.name && __jsx(Form.Feedback, {\n    children: errors.name.message\n  }))), __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"textarea\",\n    id: \"description\",\n    name: \"description\",\n    control: control,\n    invalid: Boolean(errors.description),\n    placeholder: \"Insert your description\"\n  }), __jsx(Label, {\n    \"for\": \"description\"\n  }, \"Description\"), errors.description && __jsx(Form.Feedback, {\n    children: errors.description.message\n  }))), __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"textarea\",\n    id: \"feedback\",\n    name: \"feedback\",\n    control: control,\n    invalid: Boolean(errors.feedback),\n    placeholder: \"Insert your closure feddback\"\n  }), __jsx(Label, {\n    \"for\": \"feedback\"\n  }, \"Closure feedback\"), errors.feedback && __jsx(Form.Feedback, {\n    children: errors.feedback.message\n  }))), __jsx(Button, {\n    type: \"submit\",\n    variant: \"primary\",\n    className: \"ml-2\"\n  }, data === null || data === undefined ? \"Create\" : \"Update\"), __jsx(Button, {\n    type: \"button\",\n    className: \"ml-2\",\n    onClick: function onClick() {\n      Router.back();\n    }\n  }, \"Cancel\"));\n}\n\nexport default RunnerForm;","map":null,"metadata":{},"sourceType":"module"}