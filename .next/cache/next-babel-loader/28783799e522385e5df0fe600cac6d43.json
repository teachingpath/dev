{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { RichList, Dropdown, Avatar } from \"@panely/components\";\nimport { firestoreClient } from \"components/firebase/firebaseClient\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\nimport { ReactSortable } from \"react-sortablejs\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Router from \"next/router\";\n\nclass TrackList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n    this.onSortList = this.onSortList.bind(this);\n  }\n\n  componentDidMount() {\n    firestoreClient.collection(\"runners\").doc(this.props.runnerId).collection(\"tracks\").orderBy(\"level\").get().then(querySnapshot => {\n      const list = [];\n      querySnapshot.forEach(doc => {\n        list.push({\n          id: doc.id,\n          title: doc.data().name,\n          subtitle: doc.data().description\n        });\n      });\n      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        data: list\n      }));\n    }).catch(error => {\n      console.log(\"Error getting documents: \", error);\n    });\n  }\n\n  onDelete(trackId) {\n    firestoreClient.collection(\"runners\").doc(this.props.runnerId).collection(\"tracks\").doc(trackId).delete().then(() => {\n      console.log(\"Document successfully deleted!\");\n      this.componentDidMount();\n    }).catch(error => {\n      console.error(\"Error removing document: \", error);\n    });\n  }\n\n  onSortList(list) {\n    list.forEach((item, level) => {\n      firestoreClient.collection(\"runners\").doc(this.props.runnerId).collection(\"tracks\").doc(item.id).update({\n        level: level\n      }).catch(error => {\n        console.error(\"Error removing document: \", error);\n      });\n    });\n    this.setState({\n      data: list\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    var _this$props$data, _nextProps$data;\n\n    if (((_this$props$data = this.props.data) === null || _this$props$data === void 0 ? void 0 : _this$props$data.trackId) !== ((_nextProps$data = nextProps.data) === null || _nextProps$data === void 0 ? void 0 : _nextProps$data.trackId)) {\n      this.componentDidMount();\n    }\n\n    return true;\n  }\n\n  render() {\n    return __jsx(RichList, {\n      bordered: true,\n      action: true\n    }, __jsx(ReactSortable, {\n      list: this.state.data,\n      setList: this.onSortList\n    }, this.state.data.map((data, index) => {\n      const {\n        title,\n        subtitle,\n        id\n      } = data;\n      return __jsx(RichList.Item, {\n        key: index,\n        href: \"javascript:void(0)\"\n      }, __jsx(RichList.Addon, {\n        addonType: \"prepend\"\n      }, __jsx(Avatar, {\n        display: true\n      }, __jsx(FontAwesomeIcon, {\n        icon: SolidIcon.faSort\n      }))), __jsx(RichList.Content, null, __jsx(RichList.Title, null, title), __jsx(RichList.Subtitle, null, subtitle)), __jsx(RichList.Addon, {\n        addonType: \"append\"\n      }, __jsx(Dropdown.Uncontrolled, null, __jsx(Dropdown.Toggle, {\n        icon: true,\n        variant: \"text-secondary\",\n        href: \"javascript:void(0)\"\n      }, __jsx(FontAwesomeIcon, {\n        icon: SolidIcon.faEllipsisH\n      })), __jsx(Dropdown.Menu, {\n        right: true,\n        animated: true\n      }, __jsx(Dropdown.Item, {\n        href: \"javascript:void(0)\",\n        onClick: () => {\n          Router.push({\n            pathname: \"/track/edit\",\n            query: {\n              trackId: id,\n              runnerId: this.props.runnerId,\n              pathwayId: this.props.pathwayId\n            }\n          });\n        },\n        icon: __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faEdit\n        })\n      }, \"Editar\"), __jsx(Dropdown.Item, {\n        href: \"javascript:void(0)\",\n        onClick: () => {\n          this.onDelete(id);\n        },\n        icon: __jsx(FontAwesomeIcon, {\n          icon: SolidIcon.faTrashAlt\n        })\n      }, \"Delete\")))));\n    })));\n  }\n\n}\n\nexport default TrackList;","map":null,"metadata":{},"sourceType":"module"}