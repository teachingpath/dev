{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Row, Col, Form, Label, Input, Button, Portlet, FloatLabel, Badge, CustomInput, Dropdown, Avatar, Alert } from \"@panely/components\";\nimport { firestoreClient } from \"components/firebase/firebaseClient\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\nimport { useForm, Controller, useFieldArray } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport { useState } from \"react\";\nimport Swal from \"@panely/sweetalert2\";\nimport swalContent from \"sweetalert2-react-content\";\nimport Router from \"next/router\";\nvar ReactSwal = swalContent(Swal);\nvar toast = ReactSwal.mixin({\n  toast: true,\n  position: \"top-end\",\n  showConfirmButton: false,\n  timer: 3000,\n  timerProgressBar: true,\n  onOpen: function onOpen(toast) {\n    toast.addEventListener(\"mouseenter\", ReactSwal.stopTimer);\n    toast.addEventListener(\"mouseleave\", ReactSwal.resumeTimer);\n  }\n});\n\nfunction QuizForm(_ref) {\n  var runnerId = _ref.runnerId,\n      pathwayId = _ref.pathwayId,\n      saved = _ref.saved,\n      data = _ref.data,\n      activityChange = _ref.activityChange;\n\n  var _useState = useState(data),\n      listQuestions = _useState[0],\n      setListQuestions = _useState[1];\n\n  var schema = yup.object().shape({\n    question: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your question\"),\n    type: yup.string().required(\"Please enter your type\"),\n    options: yup.array().min(2, \"Please enter at least 2 options\").required(\"Please enter your options\")\n  });\n\n  var _useForm = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: {\n      question: \"\",\n      type: \"\",\n      options: []\n    }\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors,\n      setValue = _useForm.setValue,\n      reset = _useForm.reset;\n\n  var _useFieldArray = useFieldArray({\n    control: control,\n    name: \"options\"\n  }),\n      optionsFields = _useFieldArray.fields,\n      optionsAppend = _useFieldArray.append,\n      optionsRemove = _useFieldArray.remove;\n\n  var refesh = function refesh() {\n    var runnersDb = firestoreClient.collection(\"runners\").doc(runnerId);\n    return runnersDb.collection(\"questions\").get().then(function (querySnapshot) {\n      var questions = [];\n      querySnapshot.forEach(function (doc) {\n        questions.push(_objectSpread({\n          id: doc.id\n        }, doc.data()));\n      });\n      setListQuestions(questions);\n    });\n  }; // Handle form submit event\n\n\n  var onSubmit = function onSubmit(data) {\n    var db = firestoreClient.collection(\"runners\").doc(runnerId);\n\n    if (data.id) {\n      update(db, data, function () {\n        toast.fire({\n          icon: \"success\",\n          title: \"Question saved successfully\"\n        });\n        setValue(\"id\", null);\n        activityChange({\n          pathwayId: pathwayId,\n          type: \"edit_question\",\n          msn: \"The  question created.\"\n        });\n        reset();\n        return refesh();\n      });\n    } else {\n      create(db, data, function () {\n        toast.fire({\n          icon: \"success\",\n          title: \"Question saved successfully\"\n        });\n        activityChange({\n          pathwayId: pathwayId,\n          type: \"new_question\",\n          msn: \"The  question updated.\"\n        });\n        reset();\n        return refesh();\n      });\n    }\n  };\n\n  var onDelete = function onDelete(id) {\n    var db = firestoreClient.collection(\"runners\").doc(runnerId);\n    remove(db, id, function () {\n      activityChange({\n        pathwayId: pathwayId,\n        type: \"delete_question\",\n        msn: \"The question deleted.\"\n      });\n      return refesh();\n    });\n  };\n\n  var onEdit = function onEdit(data) {\n    setValue(\"question\", data.question);\n    setValue(\"type\", data.type);\n    setValue(\"id\", data.id);\n    setValue(\"options\", data.options);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Portlet, null, __jsx(Portlet.Header, {\n    bordered: true\n  }, __jsx(Portlet.Icon, null, __jsx(FontAwesomeIcon, {\n    icon: SolidIcon.faQuestion\n  })), __jsx(Portlet.Title, null, \"Quiz\"), __jsx(Portlet.Addon, null, __jsx(Dropdown.Uncontrolled, null, __jsx(Badge, {\n    className: \"mr-2\"\n  }, \"Questions \", listQuestions.length), __jsx(Dropdown.Toggle, {\n    icon: true,\n    variant: \"text-secondary\"\n  }, __jsx(FontAwesomeIcon, {\n    icon: SolidIcon.faListOl\n  })), __jsx(Dropdown.Menu, {\n    right: true,\n    animated: true\n  }, listQuestions.map(function (item) {\n    return __jsx(Dropdown.Item, {\n      key: item.id,\n      className: \"text-right\"\n    }, recorteText(item.question, 70), __jsx(Avatar, {\n      circle: true,\n      onClick: function onClick() {\n        onEdit(item);\n      }\n    }, __jsx(FontAwesomeIcon, {\n      icon: SolidIcon.faEdit\n    })), __jsx(Avatar, {\n      circle: true,\n      onClick: function onClick() {\n        onDelete(item.id);\n      }\n    }, __jsx(FontAwesomeIcon, {\n      icon: SolidIcon.faTrash\n    })));\n  }))))), __jsx(Portlet.Body, null, __jsx(Form, {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"textarea\",\n    id: \"question\",\n    name: \"question\",\n    control: control,\n    invalid: Boolean(errors.question),\n    placeholder: \"Insert your question\"\n  }), __jsx(Label, {\n    \"for\": \"question\"\n  }, \"Question\"), errors.question && __jsx(Form.Feedback, {\n    children: errors.question.message\n  }))), __jsx(Form.Group, null, __jsx(Controller, {\n    as: CustomInput,\n    type: \"select\",\n    name: \"type\",\n    id: \"type\",\n    control: control,\n    invalid: Boolean(errors.type)\n  }, __jsx(\"option\", {\n    value: \"default\"\n  }, \"Select your type\"), __jsx(\"option\", {\n    value: \"multiple\"\n  }, \"Multiple\"), __jsx(\"option\", {\n    value: \"single\"\n  }, \"Single\"), __jsx(\"option\", {\n    value: \"yes_no\"\n  }, \"Yes/No\")), errors.type && __jsx(Form.Feedback, {\n    children: errors.type.message\n  })), optionsFields.map(function (item, index) {\n    return __jsx(Row, {\n      key: item.id,\n      className: \"pt-4\"\n    }, __jsx(Col, {\n      xs: \"11\"\n    }, __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n      as: Input,\n      defaultValue: item.name || \"\",\n      type: \"textarea\",\n      id: \"options_\".concat(index, \"_.name\"),\n      name: \"options[\".concat(index, \"].name\"),\n      control: control\n    }), __jsx(Label, {\n      \"for\": \"options_\".concat(index, \"_.name\")\n    }, \"Option#\", index + 1)))), __jsx(Col, {\n      xs: \"1\"\n    }, __jsx(Button, {\n      type: \"button\",\n      onClick: function onClick() {\n        return optionsRemove(index);\n      }\n    }, __jsx(FontAwesomeIcon, {\n      icon: SolidIcon.faTrash\n    }))), __jsx(Col, {\n      xs: \"12\"\n    }, __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n      name: \"options[\".concat(index, \"].isCorrect\"),\n      control: control,\n      render: function render(_ref2) {\n        var _onChange = _ref2.onChange,\n            onBlur = _ref2.onBlur,\n            value = _ref2.value,\n            name = _ref2.name,\n            ref = _ref2.ref;\n        return __jsx(CustomInput, {\n          type: \"checkbox\",\n          id: \"options_\".concat(index, \"_.isCorrect\"),\n          label: \"it's correct?\",\n          onBlur: onBlur,\n          name: \"options[\".concat(index, \"].isCorrect\"),\n          onChange: function onChange(e) {\n            return _onChange(e.target.checked);\n          },\n          checked: item.isCorrect || value,\n          innerRef: ref\n        });\n      }\n    })))));\n  }), __jsx(\"p\", {\n    className: \"text-right\"\n  }, __jsx(Button, {\n    variant: Boolean(errors.options) ? \"danger\" : \"primary\",\n    type: \"button\",\n    onClick: function onClick() {\n      optionsAppend({});\n    }\n  }, \"Add Option \", __jsx(FontAwesomeIcon, {\n    icon: SolidIcon.faPlus\n  }))), errors.options && __jsx(Alert, {\n    variant: \"label-danger\"\n  }, errors.options.message), __jsx(Controller, {\n    as: Input,\n    control: control,\n    type: \"hidden\",\n    name: \"id\",\n    id: \"id\"\n  }), __jsx(Portlet.Footer, {\n    bordered: true\n  }, __jsx(Button, {\n    disabled: !saved,\n    variant: \"primary\"\n  }, \"Save and add\"), __jsx(Button, {\n    type: \"button\",\n    className: \"ml-2\",\n    onClick: function onClick() {\n      Router.back();\n    }\n  }, \"Cancel\"))))));\n}\n\nfunction remove(db, id, success) {\n  db.collection(\"questions\").doc(id)[\"delete\"]().then(function () {\n    return success();\n  })[\"catch\"](function (error) {\n    console.error(\"Error removing document: \", error);\n  });\n}\n\nfunction create(db, data, success) {\n  db.collection(\"questions\").add({\n    question: data.question,\n    type: data.type,\n    options: data.options.map(function (item) {\n      return {\n        name: item.name,\n        isCorrect: item.isCorrect === true\n      };\n    })\n  }).then(function (docRef) {\n    return success();\n  })[\"catch\"](function (error) {\n    console.error(error);\n    toast.fire({\n      icon: \"error\",\n      title: \"Creation question\"\n    });\n  });\n}\n\nfunction update(db, data, success) {\n  db.collection(\"questions\").doc(data.id).set({\n    question: data.question,\n    type: data.type,\n    options: data.options.map(function (item) {\n      return {\n        name: item.name,\n        isCorrect: item.isCorrect === true\n      };\n    })\n  }).then(function (docRef) {\n    return success();\n  })[\"catch\"](function (error) {\n    toast.fire({\n      icon: \"error\",\n      title: \"Creation question\"\n    });\n  });\n}\n\nfunction recorteText(text, count) {\n  return text.slice(0, count) + (text.length > count ? \"...\" : \"\");\n}\n\nexport default QuizForm;","map":null,"metadata":{},"sourceType":"module"}