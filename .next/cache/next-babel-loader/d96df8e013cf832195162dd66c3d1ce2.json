{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Row, Col, Form, Label, Input, Button, Portlet, FloatLabel, CustomInput } from \"@panely/components\";\nimport { useForm, Controller, useFieldArray } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as SolidIcon from \"@fortawesome/free-solid-svg-icons\";\nimport Quill from \"@panely/quill\";\nimport Router from \"next/router\";\nimport { useState } from \"react\";\nconst modulesFull = {\n  toolbar: [[\"bold\", \"italic\", \"underline\", \"strike\"], [{\n    list: \"ordered\"\n  }, {\n    list: \"bullet\"\n  }, {\n    indent: \"-1\"\n  }, {\n    indent: \"+1\"\n  }], [{\n    direction: \"rtl\"\n  }, {\n    align: []\n  }], [\"link\", \"image\", \"video\"], [\"clean\"]]\n};\nconst modulesBasic = {\n  toolbar: [[{\n    list: \"ordered\"\n  }, {\n    list: \"bullet\"\n  }, {\n    indent: \"-1\"\n  }, {\n    indent: \"+1\"\n  }]]\n};\n\nfunction TrackForm({\n  onSave,\n  data\n}) {\n  const schema = yup.object().shape({\n    name: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your name\"),\n    description: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your description\"),\n    type: yup.string().required(\"Please enter your type\"),\n    timeLimit: yup.number().min(1, \"Please enter at least 1 hour\").required(\"Please enter your time limit\")\n  });\n  const {\n    control,\n    errors,\n    handleSubmit,\n    watch,\n    reset\n  } = useForm({\n    // Apply Yup as resolver for react-hook-form\n    resolver: yupResolver(schema),\n    // Define the default values for all input forms\n    defaultValues: {\n      name: (data === null || data === void 0 ? void 0 : data.name) || \"\",\n      description: (data === null || data === void 0 ? void 0 : data.description) || \"\",\n      type: (data === null || data === void 0 ? void 0 : data.type) || \"\",\n      timeLimit: (data === null || data === void 0 ? void 0 : data.timeLimit) || 1,\n      content: (data === null || data === void 0 ? void 0 : data.content) || \"\",\n      guidelines: (data === null || data === void 0 ? void 0 : data.guidelines) || \"\",\n      criteria: (data === null || data === void 0 ? void 0 : data.criteria) || \"\",\n      training: (data === null || data === void 0 ? void 0 : data.training) || {},\n      questions: (data === null || data === void 0 ? void 0 : data.questions) || {}\n    }\n  });\n  const watchFields = watch([\"type\"]);\n  return __jsx(Form, {\n    onSubmit: handleSubmit(data => {\n      onSave(data).then(() => {\n        reset();\n      });\n    })\n  }, __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"text\",\n    id: \"name\",\n    name: \"name\",\n    control: control,\n    invalid: Boolean(errors.name),\n    placeholder: \"Insert your name\"\n  }), __jsx(Label, {\n    for: \"name\"\n  }, \"Name\"), errors.name && __jsx(Form.Feedback, {\n    children: errors.name.message\n  }))), __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"textarea\",\n    id: \"description\",\n    name: \"description\",\n    control: control,\n    invalid: Boolean(errors.description),\n    placeholder: \"Insert your description\"\n  }), __jsx(Label, {\n    for: \"description\"\n  }, \"Description\"), errors.description && __jsx(Form.Feedback, {\n    children: errors.description.message\n  }))), __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"number\",\n    id: \"timeLimit\",\n    name: \"timeLimit\",\n    control: control,\n    invalid: Boolean(errors.timeLimit),\n    placeholder: \"Insert your time limit\"\n  }), __jsx(Label, {\n    for: \"timeLimit\"\n  }, \"Time limit\"), errors.timeLimit && __jsx(Form.Feedback, {\n    children: errors.timeLimit.message\n  }))), __jsx(Form.Group, null, __jsx(Controller, {\n    as: CustomInput,\n    type: \"select\",\n    name: \"type\",\n    id: \"type\",\n    control: control,\n    invalid: Boolean(errors.type)\n  }, __jsx(\"option\", {\n    value: \"default\"\n  }, \"Select your type\"), __jsx(\"option\", {\n    value: \"learning\"\n  }, \"Learning\"), __jsx(\"option\", {\n    value: \"hacking\"\n  }, \"Hacking\"), __jsx(\"option\", {\n    value: \"q_and_A\"\n  }, \"Q and A\"), __jsx(\"option\", {\n    value: \"training\"\n  }, \"Training\")), errors.type && __jsx(Form.Feedback, {\n    children: errors.type.message\n  })), {\n    learning: __jsx(React.Fragment, null, __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n      name: `content`,\n      control: control,\n      render: ({\n        onChange,\n        onBlur,\n        value,\n        name,\n        ref\n      }) => __jsx(Quill, {\n        innerRef: ref,\n        onBlur: onBlur,\n        theme: \"snow\",\n        value: value,\n        name: \"content\",\n        modules: modulesFull,\n        onChange: onChange,\n        style: {\n          minHeight: \"50rem\"\n        }\n      })\n    }), __jsx(Label, {\n      for: \"content\"\n    }, \"Content\"), errors.content && __jsx(Form.Feedback, {\n      children: errors.content.message\n    })))),\n    hacking: __jsx(React.Fragment, null, __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n      name: `guidelines`,\n      control: control,\n      render: ({\n        onChange,\n        onBlur,\n        value,\n        name,\n        ref\n      }) => __jsx(Quill, {\n        innerRef: ref,\n        onBlur: onBlur,\n        theme: \"snow\",\n        value: value,\n        id: \"guidelines\",\n        name: \"guidelines\",\n        modules: modulesBasic,\n        onChange: onChange,\n        style: {\n          minHeight: \"15rem\"\n        }\n      })\n    }), __jsx(Label, {\n      for: \"guidelines\"\n    }, \"Guidelines\"), errors.guidelines && __jsx(Form.Feedback, {\n      children: errors.guidelines.message\n    }))), __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n      name: `criteria`,\n      control: control,\n      render: ({\n        onChange,\n        onBlur,\n        value,\n        name,\n        ref\n      }) => __jsx(Quill, {\n        innerRef: ref,\n        onBlur: onBlur,\n        theme: \"snow\",\n        value: value,\n        id: \"criteria\",\n        name: \"criteria\",\n        modules: modulesBasic,\n        onChange: onChange,\n        style: {\n          minHeight: \"15rem\"\n        }\n      })\n    }), __jsx(Label, {\n      for: \"criteria\"\n    }, \"Criteria\"), errors.criteria && __jsx(Form.Feedback, {\n      children: errors.criteria.message\n    })))),\n    q_and_A: __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n      name: `questions`,\n      control: control,\n      render: ({\n        onChange,\n        onBlur,\n        value,\n        name,\n        ref\n      }) => __jsx(QuestionForm, {\n        data: value || {},\n        innerRef: ref,\n        onBlur: onBlur,\n        id: \"questions\",\n        name: \"questions\",\n        onChange: onChange\n      })\n    }), errors.questions && __jsx(Form.Feedback, {\n      children: errors.questions.message\n    }))),\n    training: __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n      name: `training`,\n      control: control,\n      render: ({\n        onChange,\n        onBlur,\n        value,\n        name,\n        ref\n      }) => __jsx(TrainingForm, {\n        data: value || {},\n        innerRef: ref,\n        onBlur: onBlur,\n        id: \"training\",\n        name: \"training\",\n        onChange: onChange\n      })\n    }), errors.training && __jsx(Form.Feedback, {\n      children: errors.training.message\n    })))\n  }[watchFields.type], __jsx(Button, {\n    type: \"submit\",\n    variant: \"primary\",\n    className: \"ml-2\"\n  }, data === null || data === undefined ? \"Create\" : \"Update\"), __jsx(Button, {\n    type: \"button\",\n    className: \"ml-2\",\n    onClick: () => {\n      Router.back();\n    }\n  }, \"Cancel\", \" \"));\n}\n\nfunction TrainingForm({\n  data,\n  onChange\n}) {\n  const {\n    0: value,\n    1: setValue\n  } = useState(data);\n  const {\n    control\n  } = useForm({\n    defaultValues: {\n      options: []\n    }\n  });\n  const {\n    fields: optionsFields,\n    append: optionsAppend,\n    remove: optionsRemove\n  } = useFieldArray({\n    control,\n    name: \"options\"\n  }); // Handle form submit event\n\n  const onChangeContent = (index, data) => {\n    value[index] = data;\n    setValue(value);\n    onChange(value);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Portlet, null, __jsx(Portlet.Header, {\n    bordered: true\n  }, __jsx(Portlet.Title, null, \"Step-by-step\")), __jsx(Portlet.Body, null, __jsx(Form, null, optionsFields.map((item, index) => {\n    return __jsx(Row, {\n      key: item.id,\n      className: \"pt-4\"\n    }, __jsx(Col, {\n      xs: \"11\"\n    }, __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n      id: `options_${index}_.name`,\n      name: `options[${index}].name`,\n      control: control,\n      render: ({\n        onChange,\n        onBlur,\n        value,\n        name,\n        ref\n      }) => __jsx(Quill, {\n        innerRef: ref,\n        theme: \"snow\",\n        value: value || \"\",\n        id: `options_${index}_.name`,\n        name: `options[${index}].name`,\n        modules: modulesFull,\n        onChange: onChange,\n        onBlur: onBlur,\n        onKeyUp: data => {\n          onChangeContent(index, value);\n        },\n        style: {\n          minHeight: \"20rem\"\n        }\n      })\n    }), __jsx(Label, {\n      for: `options_${index}_.name`\n    }, \"Step#\", index + 1)))), __jsx(Col, {\n      xs: \"1\"\n    }, __jsx(Button, {\n      type: \"button\",\n      onClick: () => {\n        optionsRemove(index);\n        delete value[index];\n        setValue(value);\n      }\n    }, __jsx(FontAwesomeIcon, {\n      icon: SolidIcon.faTrash\n    }))));\n  }), __jsx(\"p\", {\n    className: \"text-right\"\n  }, __jsx(Button, {\n    variant: \"primary\",\n    type: \"button\",\n    onClick: () => {\n      optionsAppend({});\n    }\n  }, \"Add Step \", __jsx(FontAwesomeIcon, {\n    icon: SolidIcon.faPlus\n  })))))));\n}\n\nfunction QuestionForm({\n  data,\n  onChange\n}) {\n  const {\n    0: value,\n    1: setValue\n  } = useState(data);\n  const {\n    control\n  } = useForm({\n    defaultValues: {\n      options: []\n    }\n  });\n  const {\n    fields: optionsFields,\n    append: optionsAppend,\n    remove: optionsRemove\n  } = useFieldArray({\n    control,\n    name: \"options\"\n  }); // Handle form submit event\n\n  const onChangeContent = (index, data) => {\n    value[index] = data;\n    setValue(value);\n    onChange(value);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Portlet, null, __jsx(Portlet.Header, {\n    bordered: true\n  }, __jsx(Portlet.Title, null, \"Questions\")), __jsx(Portlet.Body, null, __jsx(Form, null, optionsFields.map((item, index) => {\n    return __jsx(Row, {\n      key: item.id,\n      className: \"pt-4\"\n    }, __jsx(Col, {\n      xs: \"11\"\n    }, __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n      id: `options_${index}_.name`,\n      name: `options[${index}].name`,\n      control: control,\n      render: ({\n        onChange,\n        onBlur,\n        value,\n        name,\n        ref\n      }) => __jsx(Input, {\n        innerRef: ref,\n        type: \"textarea\",\n        value: value || \"\",\n        id: `options_${index}_.name`,\n        name: `options[${index}].name`,\n        onChange: onChange,\n        onBlur: onBlur,\n        onKeyUp: data => {\n          onChangeContent(index, value);\n        }\n      })\n    }), __jsx(Label, {\n      for: `options_${index}_.name`\n    }, \"Question#\", index + 1)))), __jsx(Col, {\n      xs: \"1\"\n    }, __jsx(Button, {\n      type: \"button\",\n      onClick: () => {\n        optionsRemove(index);\n        delete value[index];\n        setValue(value);\n      }\n    }, __jsx(FontAwesomeIcon, {\n      icon: SolidIcon.faTrash\n    }))));\n  }), __jsx(\"p\", {\n    className: \"text-right\"\n  }, __jsx(Button, {\n    variant: \"primary\",\n    type: \"button\",\n    onClick: () => {\n      optionsAppend({});\n    }\n  }, \"Add Question \", __jsx(FontAwesomeIcon, {\n    icon: SolidIcon.faPlus\n  })))))));\n}\n\nexport default TrackForm;","map":null,"metadata":{},"sourceType":"module"}