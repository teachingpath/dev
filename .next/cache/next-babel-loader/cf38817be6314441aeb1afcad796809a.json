{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Row, Col, Form, Label, Input, Button, FloatLabel } from \"@panely/components\";\nimport { useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport Router from \"next/router\";\nimport Avatar from \"react-avatar-edit\";\nimport Swal from \"@panely/sweetalert2\";\nimport swalContent from \"sweetalert2-react-content\";\nconst ReactSwal = swalContent(Swal);\nconst toast = ReactSwal.mixin({\n  toast: true,\n  position: \"top-end\",\n  showConfirmButton: false,\n  timer: 3000,\n  timerProgressBar: true,\n  onOpen: toast => {\n    toast.addEventListener(\"mouseenter\", ReactSwal.stopTimer);\n    toast.addEventListener(\"mouseleave\", ReactSwal.resumeTimer);\n  }\n});\n\nfunction PathwayForm({\n  onSave,\n  data\n}) {\n  var _data$image;\n\n  const {\n    0: image,\n    1: setImage\n  } = useState({\n    preview: (data === null || data === void 0 ? void 0 : (_data$image = data.image) === null || _data$image === void 0 ? void 0 : _data$image.preview) || \"\",\n    src: \"\"\n  }); // Define Yup schema for form validation\n\n  const schema = yup.object().shape({\n    name: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your name\"),\n    description: yup.string().min(5, \"Please enter at least 5 characters\").required(\"Please enter your description\")\n  });\n  const {\n    control,\n    handleSubmit,\n    errors\n  } = useForm({\n    // Apply Yup as resolver for react-hook-form\n    resolver: yupResolver(schema),\n    // Define the default values for all input forms\n    defaultValues: {\n      name: (data === null || data === void 0 ? void 0 : data.name) || \"\",\n      description: (data === null || data === void 0 ? void 0 : data.description) || \"\",\n      tags: (data === null || data === void 0 ? void 0 : data.tags) || \"\"\n    }\n  });\n\n  const onClose = () => {\n    setImage({\n      preview: null\n    });\n  };\n\n  const onCrop = preview => {\n    setImage({\n      preview\n    });\n  };\n\n  const onBeforeFileLoad = elem => {\n    if (elem.target.files[0].size > 71680) {\n      toast.fire({\n        icon: \"error\",\n        title: \"The image is very large\"\n      });\n      elem.target.value = \"\";\n    }\n  };\n\n  return __jsx(Form, {\n    onSubmit: handleSubmit(data => {\n      onSave(_objectSpread(_objectSpread({}, data), {}, {\n        image: image\n      }));\n    })\n  }, __jsx(Row, null, __jsx(Col, {\n    xs: \"6\"\n  }, __jsx(Form.Group, null, __jsx(Avatar, {\n    width: 130,\n    height: 130,\n    onCrop: onCrop,\n    onClose: onClose,\n    onBeforeFileLoad: onBeforeFileLoad,\n    src: image.src,\n    label: \"Pathway icon\"\n  }))), __jsx(Col, {\n    xs: \"6\"\n  }, __jsx(Form.Group, null, image.preview && __jsx(\"img\", {\n    src: image.preview,\n    alt: \"Preview\"\n  }))), __jsx(Col, {\n    xs: \"12\"\n  }, __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"text\",\n    id: \"name\",\n    name: \"name\",\n    control: control,\n    invalid: Boolean(errors.name),\n    placeholder: \"Insert your name\"\n  }), __jsx(Label, {\n    for: \"name\"\n  }, \"Name\"), errors.name && __jsx(Form.Feedback, {\n    children: errors.name.message\n  }))), __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"textarea\",\n    id: \"description\",\n    name: \"description\",\n    control: control,\n    invalid: Boolean(errors.description),\n    placeholder: \"Insert your description\"\n  }), __jsx(Label, {\n    for: \"description\"\n  }, \"Description\"), errors.description && __jsx(Form.Feedback, {\n    children: errors.description.message\n  }))), __jsx(Form.Group, null, __jsx(FloatLabel, null, __jsx(Controller, {\n    as: Input,\n    type: \"text\",\n    id: \"tags\",\n    name: \"tags\",\n    control: control,\n    placeholder: \"Insert your tags separated by commas\"\n  }), __jsx(Label, {\n    for: \"tags\"\n  }, \"Tags\"))))), __jsx(Button, {\n    type: \"submit\",\n    variant: \"primary\"\n  }, data === null || data === undefined ? \"Create\" : \"Update\"), __jsx(Button, {\n    type: \"button\",\n    className: \"ml-2\",\n    onClick: () => {\n      Router.back();\n    }\n  }, \"Cancel\"));\n}\n\nexport default PathwayForm;","map":null,"metadata":{},"sourceType":"module"}